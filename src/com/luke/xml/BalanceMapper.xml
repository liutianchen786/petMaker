<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.luke.dao.BalanceMapper" >

    <resultMap id="BaseResultMap" type="com.luke.model.Balance" >
        <id column="bid" property="bid" jdbcType="INTEGER" />
        <result column="openid" property="openid" jdbcType="VARCHAR" />
        <result column="balance" property="balance" jdbcType="INTEGER" />
        <result column="top-up" property="topUp" jdbcType="INTEGER" />
        <result column="withdrawal" property="withdrawal" jdbcType="INTEGER" />
        <result column="state" property="state" jdbcType="INTEGER" />
    </resultMap>

    <sql id="Base_Column_List" >
        bid, openid, balance, top-up, withdrawal, state
    </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select 
        <include refid="Base_Column_List" />
        from balance
        where bid = #{bid,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from balance
        where bid = #{bid,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="com.luke.model.Balance" >
        insert into balance (bid, openid, balance, 
            top-up, withdrawal, state
            )
        values (#{bid,jdbcType=INTEGER}, #{openid,jdbcType=VARCHAR}, #{balance,jdbcType=INTEGER}, 
            #{topUp,jdbcType=INTEGER}, #{withdrawal,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}
            )
    </insert>

    <insert id="insertSelective" parameterType="com.luke.model.Balance" >
        insert into balance
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="bid != null" >
                bid,
            </if>
            <if test="openid != null" >
                openid,
            </if>
            <if test="balance != null" >
                balance,
            </if>
            <if test="topUp != null" >
                top-up,
            </if>
            <if test="withdrawal != null" >
                withdrawal,
            </if>
            <if test="state != null" >
                state,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="bid != null" >
                #{bid,jdbcType=INTEGER},
            </if>
            <if test="openid != null" >
                #{openid,jdbcType=VARCHAR},
            </if>
            <if test="balance != null" >
                #{balance,jdbcType=INTEGER},
            </if>
            <if test="topUp != null" >
                #{topUp,jdbcType=INTEGER},
            </if>
            <if test="withdrawal != null" >
                #{withdrawal,jdbcType=INTEGER},
            </if>
            <if test="state != null" >
                #{state,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.luke.model.Balance" >
        update balance
        <set >
            <if test="openid != null" >
                openid = #{openid,jdbcType=VARCHAR},
            </if>
            <if test="balance != null" >
                balance = #{balance,jdbcType=INTEGER},
            </if>
            <if test="topUp != null" >
                top-up = #{topUp,jdbcType=INTEGER},
            </if>
            <if test="withdrawal != null" >
                withdrawal = #{withdrawal,jdbcType=INTEGER},
            </if>
            <if test="state != null" >
                state = #{state,jdbcType=INTEGER},
            </if>
        </set>
        where bid = #{bid,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.luke.model.Balance" >
        update balance
        set openid = #{openid,jdbcType=VARCHAR},
            balance = #{balance,jdbcType=INTEGER},
            top-up = #{topUp,jdbcType=INTEGER},
            withdrawal = #{withdrawal,jdbcType=INTEGER},
            state = #{state,jdbcType=INTEGER}
        where bid = #{bid,jdbcType=INTEGER}
    </update>
</mapper>